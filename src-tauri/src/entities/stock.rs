//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "stock")]
pub struct Model {
    #[sea_orm(primary_key, unique)]
    pub id: i32,
    pub location: i32,
    pub product: i32,
    pub amount: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::locations::Entity",
        from = "Column::Location",
        to = "super::locations::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Locations,
    #[sea_orm(
        belongs_to = "super::products::Entity",
        from = "Column::Product",
        to = "super::products::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Products,
}

impl Related<super::locations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Locations.def()
    }
}

impl Related<super::products::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Products.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
