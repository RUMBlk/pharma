//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "positions")]
pub struct Model {
    #[sea_orm(primary_key, unique)]
    pub id: i32,
    pub location: i32,
    pub name: String,
    #[sea_orm(column_type = "Decimal(Some((8, 2)))")]
    pub salary: Decimal,
    pub can_manage_empl: i8,
    pub can_manage_products: i8,
    pub can_manage_categories: i8,
    pub can_sell_products: i8,
    pub can_manage_locations: i8,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::employees::Entity")]
    Employees,
    #[sea_orm(
        belongs_to = "super::locations::Entity",
        from = "Column::Location",
        to = "super::locations::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Locations,
}

impl Related<super::employees::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Employees.def()
    }
}

impl Related<super::locations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Locations.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
