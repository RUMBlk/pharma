//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "products")]
pub struct Model {
    #[sea_orm(primary_key, unique)]
    pub id: i32,
    pub name: String,
    pub description: Option<String>,
    #[sea_orm(column_type = "Decimal(Some((7, 2)))")]
    pub price: Decimal,
    #[sea_orm(column_type = "Decimal(Some((4, 2)))", nullable)]
    pub discount: Option<Decimal>,
    pub category: Option<i32>,
    #[sea_orm(column_type = "Decimal(Some((7, 2)))")]
    pub final_price: Decimal,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::categories::Entity",
        from = "Column::Category",
        to = "super::categories::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Categories,
    #[sea_orm(has_many = "super::stock::Entity")]
    Stock,
}

impl Related<super::categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Categories.def()
    }
}

impl Related<super::stock::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Stock.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
